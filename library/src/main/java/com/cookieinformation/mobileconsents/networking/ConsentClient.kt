package com.cookieinformation.mobileconsents.networking

import com.cookieinformation.mobileconsents.BuildConfig
import com.cookieinformation.mobileconsents.Consent
import com.cookieinformation.mobileconsents.adapter.extension.parseToRequestBody
import com.cookieinformation.mobileconsents.networking.request.ConsentRequestJsonAdapter
import com.cookieinformation.mobileconsents.networking.request.TokenRequest
import com.cookieinformation.mobileconsents.networking.request.TokenRequestJsonAdapter
import com.cookieinformation.mobileconsents.storage.Preferences
import com.cookieinformation.mobileconsents.system.ApplicationProperties
import com.cookieinformation.mobileconsents.toRequest
import com.cookieinformation.mobileconsents.util.getUtcDate
import com.squareup.moshi.Moshi
import okhttp3.Call
import okhttp3.HttpUrl
import okhttp3.HttpUrl.Companion.toHttpUrl
import okhttp3.Request
import java.util.UUID

private const val consentJsonFileName = "consent-data.json"

/**
 * Client responsible for creating [Call]s to the CDN and partners server.
 */
internal class ConsentClient(
  val consentSolutionId: UUID,
  val clientId: String,
  val clientSecret: String,
  private val getUrl: HttpUrl,
  private val postUrl: HttpUrl,
  private val callFactory: Call.Factory,
  private val moshi: Moshi,
  private val preferences: Preferences
) {

  /**
   * Get access token from authentication server.
   */
  fun getToken(): Call {
    val adapter = TokenRequestJsonAdapter(moshi)
    val requestBody =
      adapter.parseToRequestBody(TokenRequest(clientId, clientSecret, "client_credentials"))
    val url = BuildConfig.BASE_URL_TOKEN.toHttpUrl().newBuilder().build()
    val request = Request.Builder()
      .url(url)
      .post(requestBody)
      .build()
    return callFactory.newCall(request)
  }

  /**
   * Get consent from CDN server.
   */
  fun getConsentSolution(): Call {
    val url = getUrl.newBuilder()
      .addPathSegment(consentSolutionId.toString())
      .addPathSegment(consentJsonFileName)
      .build()
    val request = Request.Builder().url(url).build()

    return callFactory.newCall(request)
  }

  /**
   * Post [Consent] to partner server (URL specified in SDK's builder)
   * @param consent object containing user's consents, platform information and custom data.
   * @param userId [UUID] generated by SDK, unique per app installation.
   * @param date time of request, in ISO 8601 format.
   */
  fun postConsent(
    consent: Consent,
    userId: UUID,
    applicationProperties: ApplicationProperties,
    date: String = getUtcDate()
  ): Call {
    val adapter = ConsentRequestJsonAdapter(moshi)
    val requestBody = adapter.parseToRequestBody(consent.toRequest(userId, applicationProperties))
    val accessToken = preferences.getAccessToken()
    val request = Request.Builder()
      .url(postUrl)
      .addHeader("Authorization", "Bearer " + accessToken.toString())
      .addHeader("Content-Type", "application/json; charset=utf-8")
      .post(requestBody)
      .build()

    return callFactory.newCall(request)
  }
}
